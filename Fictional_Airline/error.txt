DijkstraSPCost.java:71: error: invalid method declaration; return type required
    public DijkstraSP(EdgeWeightedDigraph G, String start, String end) {
           ^
DijkstraSPCost.java:80: error: illegal start of type
		else
		^
DijkstraSPCost.java:80: error: ';' expected
		else
		    ^
DijkstraSPCost.java:81: error: illegal start of type
			System.out.println("Check your spelling, the place: "+start+" "+end+" is not found");
			      ^
DijkstraSPCost.java:81: error: ';' expected
			System.out.println("Check your spelling, the place: "+start+" "+end+" is not found");
			          ^
DijkstraSPCost.java:81: error: invalid method declaration; return type required
			System.out.println("Check your spelling, the place: "+start+" "+end+" is not found");
			           ^
DijkstraSPCost.java:81: error: illegal start of type
			System.out.println("Check your spelling, the place: "+start+" "+end+" is not found");
			                   ^
DijkstraSPCost.java:81: error: ')' expected
			System.out.println("Check your spelling, the place: "+start+" "+end+" is not found");
			                                                     ^
DijkstraSPCost.java:81: error: ';' expected
			System.out.println("Check your spelling, the place: "+start+" "+end+" is not found");
			                                                      ^
DijkstraSPCost.java:81: error: illegal start of type
			System.out.println("Check your spelling, the place: "+start+" "+end+" is not found");
			                                                           ^
DijkstraSPCost.java:81: error: <identifier> expected
			System.out.println("Check your spelling, the place: "+start+" "+end+" is not found");
			                                                            ^
DijkstraSPCost.java:81: error: ';' expected
			System.out.println("Check your spelling, the place: "+start+" "+end+" is not found");
			                                                               ^
DijkstraSPCost.java:81: error: <identifier> expected
			System.out.println("Check your spelling, the place: "+start+" "+end+" is not found");
			                                                                   ^
DijkstraSPCost.java:81: error: illegal start of type
			System.out.println("Check your spelling, the place: "+start+" "+end+" is not found");
			                                                                    ^
DijkstraSPCost.java:81: error: <identifier> expected
			System.out.println("Check your spelling, the place: "+start+" "+end+" is not found");
			                                                                                   ^
DijkstraSPCost.java:84: error: illegal start of type
        for (DirectedEdge e : G.edges()) {
        ^
DijkstraSPCost.java:84: error: ')' expected
        for (DirectedEdge e : G.edges()) {
                           ^
DijkstraSPCost.java:84: error: <identifier> expected
        for (DirectedEdge e : G.edges()) {
                                     ^
DijkstraSPCost.java:84: error: ';' expected
        for (DirectedEdge e : G.edges()) {
                                       ^
DijkstraSPCost.java:89: error: <identifier> expected
        distTo = new double[G.V()+1];
              ^
DijkstraSPCost.java:90: error: <identifier> expected
        edgeTo = new DirectedEdge[G.V()+1];
              ^
DijkstraSPCost.java:91: error: illegal start of type
        for (int v = 1; v <=G.V(); v++)
        ^
DijkstraSPCost.java:91: error: ')' expected
        for (int v = 1; v <=G.V(); v++)
                  ^
DijkstraSPCost.java:91: error: illegal start of type
        for (int v = 1; v <=G.V(); v++)
                     ^
DijkstraSPCost.java:91: error: <identifier> expected
        for (int v = 1; v <=G.V(); v++)
                      ^
DijkstraSPCost.java:91: error: ';' expected
        for (int v = 1; v <=G.V(); v++)
                       ^
DijkstraSPCost.java:91: error: illegal start of type
        for (int v = 1; v <=G.V(); v++)
                          ^
DijkstraSPCost.java:91: error: ';' expected
        for (int v = 1; v <=G.V(); v++)
                             ^
DijkstraSPCost.java:91: error: invalid method declaration; return type required
        for (int v = 1; v <=G.V(); v++)
                              ^
DijkstraSPCost.java:91: error: <identifier> expected
        for (int v = 1; v <=G.V(); v++)
                                    ^
DijkstraSPCost.java:91: error: illegal start of type
        for (int v = 1; v <=G.V(); v++)
                                      ^
DijkstraSPCost.java:92: error: ']' expected
            distTo[v] = Double.POSITIVE_INFINITY;
                   ^
DijkstraSPCost.java:92: error: illegal start of type
            distTo[v] = Double.POSITIVE_INFINITY;
                    ^
DijkstraSPCost.java:92: error: <identifier> expected
            distTo[v] = Double.POSITIVE_INFINITY;
                     ^
DijkstraSPCost.java:92: error: ';' expected
            distTo[v] = Double.POSITIVE_INFINITY;
                       ^
DijkstraSPCost.java:92: error: illegal start of type
            distTo[v] = Double.POSITIVE_INFINITY;
                              ^
DijkstraSPCost.java:93: error: ']' expected
        distTo[s] = 0.0;
               ^
DijkstraSPCost.java:93: error: ';' expected
        distTo[s] = 0.0;
                ^
DijkstraSPCost.java:96: error: <identifier> expected
        pq = new IndexMinPQ<Double>((G.V()+1));
          ^
DijkstraSPCost.java:97: error: <identifier> expected
        pq.insert(s, distTo[s]);
                 ^
DijkstraSPCost.java:97: error: <identifier> expected
        pq.insert(s, distTo[s]);
                   ^
DijkstraSPCost.java:97: error: ']' expected
        pq.insert(s, distTo[s]);
                            ^
DijkstraSPCost.java:97: error: ')' expected
        pq.insert(s, distTo[s]);
                             ^
DijkstraSPCost.java:97: error: illegal start of type
        pq.insert(s, distTo[s]);
                              ^
DijkstraSPCost.java:97: error: <identifier> expected
        pq.insert(s, distTo[s]);
                               ^
DijkstraSPCost.java:97: error: ';' expected
        pq.insert(s, distTo[s]);
                                ^
DijkstraSPCost.java:100: error: illegal start of type
        while (!pq.isEmpty()) {
              ^
DijkstraSPCost.java:100: error: <identifier> expected
        while (!pq.isEmpty()) {
               ^
DijkstraSPCost.java:100: error: ';' expected
        while (!pq.isEmpty()) {
                ^
DijkstraSPCost.java:100: error: illegal start of type
        while (!pq.isEmpty()) {
                  ^
DijkstraSPCost.java:100: error: ';' expected
        while (!pq.isEmpty()) {
                            ^
DijkstraSPCost.java:111: error: as of release 1.4, 'assert' is a keyword, and may not be used as an identifier
        assert check(G, s);
        ^
  (use -source 1.3 or lower to use 'assert' as an identifier)
DijkstraSPCost.java:111: error: <identifier> expected
        assert check(G, s);
                      ^
DijkstraSPCost.java:111: error: <identifier> expected
        assert check(G, s);
                         ^
DijkstraSPCost.java:115: error: class, interface, or enum expected
    private void relax(DirectedEdge e) {
            ^
DijkstraSPCost.java:117: error: class, interface, or enum expected
        if (distTo[w] > distTo[v] + e.weightCost()) {
        ^
DijkstraSPCost.java:119: error: class, interface, or enum expected
            edgeTo[w] = e;
            ^
DijkstraSPCost.java:120: error: class, interface, or enum expected
            if (pq.contains(w)) pq.decreaseKey(w, distTo[w]);
            ^
DijkstraSPCost.java:121: error: class, interface, or enum expected
            else                pq.insert(w, distTo[w]);
            ^
DijkstraSPCost.java:122: error: class, interface, or enum expected
        }
        ^
DijkstraSPCost.java:131: error: class, interface, or enum expected
    public double distTo(int v) {
           ^
DijkstraSPCost.java:133: error: class, interface, or enum expected
    }
    ^
DijkstraSPCost.java:142: error: class, interface, or enum expected
    public boolean hasPathTo(int v) {
           ^
DijkstraSPCost.java:144: error: class, interface, or enum expected
    }
    ^
DijkstraSPCost.java:153: error: class, interface, or enum expected
    public Iterable<DirectedEdge> pathTo(int v) {
           ^
DijkstraSPCost.java:155: error: class, interface, or enum expected
        Stack<DirectedEdge> path = new Stack<DirectedEdge>();
        ^
DijkstraSPCost.java:156: error: class, interface, or enum expected
        for (DirectedEdge e = edgeTo[v]; e != null; e = edgeTo[e.from()]) {
        ^
DijkstraSPCost.java:156: error: class, interface, or enum expected
        for (DirectedEdge e = edgeTo[v]; e != null; e = edgeTo[e.from()]) {
                                         ^
DijkstraSPCost.java:156: error: class, interface, or enum expected
        for (DirectedEdge e = edgeTo[v]; e != null; e = edgeTo[e.from()]) {
                                                    ^
DijkstraSPCost.java:158: error: class, interface, or enum expected
        }
        ^
DijkstraSPCost.java:160: error: class, interface, or enum expected
    }
    ^
DijkstraSPCost.java:172: error: class, interface, or enum expected
                return false;
                ^
DijkstraSPCost.java:173: error: class, interface, or enum expected
            }
            ^
DijkstraSPCost.java:179: error: class, interface, or enum expected
            return false;
            ^
DijkstraSPCost.java:180: error: class, interface, or enum expected
        }
        ^
DijkstraSPCost.java:181: error: class, interface, or enum expected
        for (int v = 0; v < G.V(); v++) {
                        ^
DijkstraSPCost.java:181: error: class, interface, or enum expected
        for (int v = 0; v < G.V(); v++) {
                                   ^
DijkstraSPCost.java:183: error: class, interface, or enum expected
            if (edgeTo[v] == null && distTo[v] != Double.POSITIVE_INFINITY) {
            ^
DijkstraSPCost.java:185: error: class, interface, or enum expected
                return false;
                ^
DijkstraSPCost.java:186: error: class, interface, or enum expected
            }
            ^
DijkstraSPCost.java:190: error: class, interface, or enum expected
        for (int v = 1; v <= G.V(); v++) {
                        ^
DijkstraSPCost.java:190: error: class, interface, or enum expected
        for (int v = 1; v <= G.V(); v++) {
                                    ^
DijkstraSPCost.java:193: error: class, interface, or enum expected
                if (distTo[v] + e.weightCost() < distTo[w]) {
                ^
DijkstraSPCost.java:195: error: class, interface, or enum expected
                    return false;
                    ^
DijkstraSPCost.java:196: error: class, interface, or enum expected
                }
                ^
DijkstraSPCost.java:201: error: class, interface, or enum expected
        for (int w = 1; w <= G.V(); w++) {
                        ^
DijkstraSPCost.java:201: error: class, interface, or enum expected
        for (int w = 1; w <= G.V(); w++) {
                                    ^
DijkstraSPCost.java:203: error: class, interface, or enum expected
            DirectedEdge e = edgeTo[w];
            ^
DijkstraSPCost.java:204: error: class, interface, or enum expected
            int v = e.from();
            ^
DijkstraSPCost.java:205: error: class, interface, or enum expected
            if (w != e.to()) return false;
            ^
DijkstraSPCost.java:206: error: class, interface, or enum expected
            if (distTo[v] + e.weightCost() != distTo[w]) {
            ^
DijkstraSPCost.java:208: error: class, interface, or enum expected
                return false;
                ^
DijkstraSPCost.java:209: error: class, interface, or enum expected
            }
            ^
DijkstraSPCost.java:212: error: class, interface, or enum expected
    }
    ^
DijkstraSPCost.java:218: error: class, interface, or enum expected
    public static void main(String[] args) throws IOException{
                  ^
DijkstraSPCost.java:222: error: class, interface, or enum expected
		Scanner fileN = new Scanner(System.in);
		^
DijkstraSPCost.java:223: error: class, interface, or enum expected
		String file = fileN.nextLine();
		^
DijkstraSPCost.java:226: error: class, interface, or enum expected
		EdgeWeightedDigraph G = new EdgeWeightedDigraph(file);
		^
DijkstraSPCost.java:231: error: class, interface, or enum expected
		System.out.println("Where do you want to start?");
		^
DijkstraSPCost.java:232: error: class, interface, or enum expected
		Scanner start = new Scanner(System.in);
		^
100 errors
